name: Build and Create Multi-Platform Releases

on:
  push:
    branches:
      - main

env:
  GO_VERSION: ${{ vars.GO_VERSION }}

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            goos: linux
            ext: ''
            archive_ext: 'tar.gz'
          - os: macos-latest
            goos: darwin
            ext: ''
            archive_ext: 'tar.gz'
          - os: windows-latest
            goos: windows
            ext: '.exe'
            archive_ext: 'zip'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: amd64
        run: go build -o kubectl-limitrange${{ matrix.ext }} ./cmd/kubectl-lr

      # Removed the Copy LICENSE file step

      - name: Create archive for release (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Compress-Archive -Path "kubectl-limitrange${{ matrix.ext }}", "LICENSE" -DestinationPath "kubectl-limitrange-${{ matrix.goos }}-amd64.zip"

      - name: Create archive for release (Unix)
        if: runner.os != 'Windows'
        run: |
          tar -czvf kubectl-limitrange-${{ matrix.goos }}-amd64.tar.gz kubectl-limitrange${{ matrix.ext }} LICENSE

      - name: Generate checksum (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Get-FileHash -Algorithm SHA256 -Path "kubectl-limitrange-${{ matrix.goos }}-amd64.zip" |
          ForEach-Object { "{0}  {1}" -f $_.Hash.ToLower(), $_.Path } |
          Out-File -Encoding ascii -FilePath "kubectl-limitrange-${{ matrix.goos }}-amd64.zip.sha256"

      - name: Generate checksum (Unix)
        if: runner.os != 'Windows'
        run: |
          shasum -a 256 kubectl-limitrange-${{ matrix.goos }}-amd64.tar.gz | awk '{ print tolower($0) }' > kubectl-limitrange-${{ matrix.goos }}-amd64.tar.gz.sha256

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kubectl-limitrange-${{ matrix.goos }}-amd64
          path: |
            kubectl-limitrange-${{ matrix.goos }}-amd64.*
            kubectl-limitrange-${{ matrix.goos }}-amd64.*.sha256

  create-release:
    runs-on: ubuntu-latest
    needs: build-and-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: DEBUG FILES
        run: ls -l artifacts

      - name: Generate release notes with checksums
        run: |
          echo "## Checksums" > release_body.md
          echo "" >> release_body.md
          for file in artifacts/*/*.sha256; do
            echo "\`\`\`" >> release_body.md
            cat "$file" >> release_body.md
            echo "\`\`\`" >> release_body.md
            echo "" >> release_body.md
          done

      - name: Create and Upload Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/*/kubectl-limitrange-*-amd64.tar.gz
            artifacts/*/kubectl-limitrange-*-amd64.zip
            artifacts/*/kubectl-limitrange-*-amd64.tar.gz.sha256
            artifacts/*/kubectl-limitrange-*-amd64.zip.sha256
          tag_name: "v1.0.2"  # Replace with appropriate tag logic if needed
          name: Release ${{ github.ref_name }}
          body_path: release_body.md
          draft: true  # Change to false to automatically publish the release
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
