name: Go CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  GO_VERSION: ${{ vars.GO_VERSION }}

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            ext: ''
          - os: macos-latest
            ext: ''
          - os: windows-latest
            ext: '.exe'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Build
        run: go build -o kubectl-create-limitrange${{ matrix.ext }} ./cmd/kubectl-create-lr

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: kubectl-create-limitrange-${{ matrix.os }}
          path: ./kubectl-create-limitrange${{ matrix.ext }}

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Run go fmt
        run: go fmt ./...

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.64
          args: --timeout=30m

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            ext: ''
          - os: macos-latest
            ext: ''
          - os: windows-latest
            ext: '.exe'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Run tests with coverage
        run: go test ./... -v -coverprofile=coverage.txt

      - name: Display test coverage
        if: matrix.os == 'ubuntu-latest'
        run: go tool cover -func=coverage.txt

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' # Upload it just once
        uses: codecov/codecov-action@v4
        with:
          files: coverage.txt
          flags: unittests
          token: ${{ secrets.CODECOV_TOKEN }}
